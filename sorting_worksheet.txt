1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]

temp = my_list[7]
my_list[7] = my_list[6]
my_list[6] = temp

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18, 2, 11, 57, 14, 38, 19, 91]

temp = my_list[3]
my_list[3] = my_list[0]
my_list[0] = temp

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

- Because you didn't effectively swap position 0 and position 1,
you set both position 1 and position 0 to position 0.

4. Show how the following numbers can be sorted using the selection sort.
Show the numbers after each iteration of the outer loop, similar to what is shown in the book.
I am NOT looking for a copy of the code to do the sort.
If you include any code for problems 4-7 you are doing it wrong.

97 74 8 98 47 62 12 11 0 60

0 74 8 98 47 62 12 11 97 60
0 8 74 98 47 62 12 11 97 60
0 8 11 98 47 62 12 74 97 60
0 8 11 12 47 62 98 74 97 60
0 8 11 12 47 62 98 74 97 60
0 8 11 12 47 60 98 74 97 62
0 8 11 12 47 60 62 74 97 98
0 8 11 12 47 60 62 74 97 98
0 8 11 12 47 60 62 74 97 98
0 8 11 12 47 60 62 74 97 98


5. Show how the following numbers can be sorted using the selection sort:

74 92 18 47 40 58 0 36 29 25

0 92 18 47 40 58 74 36 29 25
0 18 92 47 40 58 74 36 29 25
0 18 25 47 40 58 74 36 29 92
0 18 25 29 40 58 74 36 47 92
0 18 26 29 36 58 74 40 47 92
0 18 26 29 36 40 74 58 47 92
0 18 26 29 36 40 47 58 74 92
0 18 26 29 36 40 47 58 74 92
0 18 26 29 36 40 47 58 74 92
0 18 26 29 36 40 47 58 74 92

6. Show how the following numbers can be sorted using the INSERTION sort.
(Note: If you think the 0 gets immediately sorted into position, you are doing it wrong.
Go back and re-read how this sort works.)

74 92 18 47 40 58 0 36 29 25

74 92 18 47 40 58 0 36 29 25
18 74 92 47 40 58 0 36 29 25
18 47 74 92 40 58 0 36 29 25
18 40 47 74 92 58 0 36 29 25
18 40 47 58 74 92 0 36 29 25
0 18 40 47 58 74 92 36 29 25
0 18 36 40 47 58 74 92 29 25
0 18 29 36 40 47 58 74 92 25
0 18 25 29 36 40 47 58 74 92


7. Show how the following numbers can be sorted using the insertion sort:

37 11 14 50 24 7 17 88 99 9

11 37 14 50 24 7 17 88 99 9
11 14 37 50 24 7 12 88 99 9
11 14 37 50 24 7 12 88 99 9
11 14 24 37 50 7 12 88 99 9
7 11 14 24 37 50 12 88 99 9
7 11 12 14 24 37 50 88 99 9
7 11 12 14 24 37 50 88 99 9
7 11 12 14 24 37 50 88 99 9
7 9 11 12 14 24 37 50 88 99

8. Explain what `min_pos` does in the selection sort.
    - It holds the position of the smallest value

9. Explain what `cur_pos` does in the selection sort.
    - It holds the position of the current value in each loop

10. Explain what `scan_pos` does in the selection sort.
    - The scan_pos is the position that changes with each loop,
    it is the current value being checked.

11. Explain what `key_pos` and `key_value` are in the insertion sort.
    - The key_pos marks the boundary between the sorted part of the list
    and the unsorted part of the list.
    - If the value of the cur_pos is greater than the key_value it moves to it's left,
    and if it's smaller than the key_value it moves to its right.

12. Explain `scan_pos` in the insertion sort.
    - The scan_pos is one value less than the key_pos

13. Look at the example sort program at the very end of this chapter:

https://learn.arcade.academy/en/latest/chapters/30_sorting/sorting.html


Modify the sorts to print the number of times the inside loop is run, and the number of times the outside loop is run.
Modify the program to work with a list of 100. Paste the code you used here.
Run the program and list the numbers you got here. (DON'T FORGET TO INCLUDE THE RESULTS!)
Inside loop for selection sort should be about 5,000, and insertion sort 2,500.
Double-check if you don't get numbers close to these.

import random


def selection_sort(my_list):
    outside_loop_count = 0
    inside_loop_count = 0
    for cur_pos in range(len(my_list)):
        outside_loop_count += 1
        min_pos = cur_pos

        for scan_pos in range(cur_pos + 1, len(my_list)):
            inside_loop_count += 1
            if my_list[scan_pos] < my_list[min_pos]:
                min_pos = scan_pos

        temp = my_list[min_pos]
        my_list[min_pos] = my_list[cur_pos]
        my_list[cur_pos] = temp

    print(f"Outside Loop: {outside_loop_count}")
    print(f"Inside Loop: {inside_loop_count}")


def insertion_sort(my_list):
    outside_loop_count = 0
    inside_loop_count = 0
    for key_pos in range(1, len(my_list)):
        outside_loop_count += 1
        key_value = my_list[key_pos]

        scan_pos = key_pos - 1

        while (scan_pos >= 0) and (my_list[scan_pos] > key_value):
            inside_loop_count += 1
            my_list[scan_pos + 1] = my_list[scan_pos]
            scan_pos = scan_pos - 1

        my_list[scan_pos + 1] = key_value

    print(f"Outside Loop: {outside_loop_count}")
    print(f"Inside Loop: {inside_loop_count}")


def print_list(my_list):
    for item in my_list:
        print(f"{item:3}", end="")
    print()


def main():
    list_for_selection_sort = []
    list_for_insertion_sort = []
    list_size = 100
    for i in range(list_size):
        new_number = random.randrange(100)
        list_for_selection_sort.append(new_number)
        list_for_insertion_sort.append(new_number)

    print("Original List")
    print_list(list_for_selection_sort)
    print()

    print("Selection Sort")
    selection_sort(list_for_selection_sort)
    print_list(list_for_selection_sort)
    print()

    print("Insertion Sort")
    insertion_sort(list_for_insertion_sort)
    print_list(list_for_insertion_sort)


main()

Results:
Original List
 72 44 43 30 55 16 98 64 42 53 75 82 82 52 68 91 47 27 96 99 54 51 60 90 37 83 93 65 48 87 30 74 54 87 35  2 97 24 52 71 53  4 95 29  8 59 39 88 84 78  2  9 52 79 65 78  1 81 79 94 31 68 31  2 53 58 12 39 84 84 94 95 29 77 46  5 68 98  7 47 30 22 34  2 93 10 52 44  4 86 46 82 57 99 50 93 65 49 82 52

Selection Sort
Outside Loop: 100
Inside Loop: 4950
  1  2  2  2  2  4  4  5  7  8  9 10 12 16 22 24 27 29 29 30 30 30 31 31 34 35 37 39 39 42 43 44 44 46 46 47 47 48 49 50 51 52 52 52 52 52 53 53 53 54 54 55 57 58 59 60 64 65 65 65 68 68 68 71 72 74 75 77 78 78 79 79 81 82 82 82 82 83 84 84 84 86 87 87 88 90 91 93 93 93 94 94 95 95 96 97 98 98 99 99

Insertion Sort
Outside Loop: 99
Inside Loop: 2552
  1  2  2  2  2  4  4  5  7  8  9 10 12 16 22 24 27 29 29 30 30 30 31 31 34 35 37 39 39 42 43 44 44 46 46 47 47 48 49 50 51 52 52 52 52 52 53 53 53 54 54 55 57 58 59 60 64 65 65 65 68 68 68 71 72 74 75 77 78 78 79 79 81 82 82 82 82 83 84 84 84 86 87 87 88 90 91 93 93 93 94 94 95 95 96 97 98 98 99 99

Process finished with exit code 0
