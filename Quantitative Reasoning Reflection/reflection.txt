Hannah Brewer
12/01/21
Quantitative Reasoning Reflection

1. By using the idea that if you have a large problem, break it down into
smaller parts, I was able to discern which techniques to use in my programs.
For example, if I needed to create a text based adventure with multiple options
depending on the users choice I would figure that I'd need a couple of
"if statements" to reflect the different outcomes of the different options.
If I needed to the same thing multiple times, like creating a sequence of the
same wall in a game, I would decide to use a loop to create them quickly
instead of writing code for each individual wall. If I needed to create an
object or character with a consistent setup, I would create a class to use and
create different instances of the class throughout the rest of my program.
Deciding which methods to use depended on what I wanted to do and what I wanted
to make possible in my code, it required me to break down what I was doing to
small consistent steps to eventually create a larger picture.

2. When trying to communicate and explain your code to others it's important
to first ask if you yourself could understand your code if your were an
outsider looking in. Making your code clear and readable depends on naming
variables and functions logically, making sure instead of making a "t" variable
you name it to reflect what it represents. It's also important to put clear
and concise comments throughout your code, so that you explain why your code is
important and what its purpose is within the program. It's also important to
write and place your code in a logical order, so don't put your main function
between two classes or functions that you use in the main function. Grouping
like things together within your code also helps to make it more readable, you
can do this by keeping all of your "if statements" in the same area under a
function, or grouping all the variables within a function together.

3. When evaluating the accuracy of your code, it's important to try and test
for every possible scenario and outcome, and make sure they all line up with
what's expected. A good way to see if something is wrong with your code is to
test and see if certain commands cause the program to crash. If and when your
code crashes it's also important to decipher what the error you're getting means
and how to fix it. It's also important to see if you have gotten your expected
output, say you wanted a character to jump when you hit the space bar, but they
move to the left instead, then there is probably something wrong with your code
even though it's technically running fine. When all else fails and you just can't
figure out what the problem is, try printing the output of different variables
and lists, so that you can see what the computer is trying to read, and if it's
what you expected to be there.

4. What makes humans so different from computers is that people can evolve and
change overtime, whereas a computer will always function and behave in a very
particular and certain way. You can't evaluate a students ability based on test
scores alone because we as people have the innate ability to learn and grow, with
time and persistence we can achieve great things, a computer can't change unless
a human programs it to. Algorithms are helpful and can help us visualize and
shape the future we want, however these are still set systems that cannot explain
the entirety of our existence. People are complex and ever-changing due to our
experiences and emotions. One day we might love cherries but one bad case of
food poisoning can easily make us hate them. A computer will like cherries if we
tell it to, and dislike cherries if we tell it to. It has no real opinions of its
own, and it can't simply form one. An algorithm may teach the computer to "learn",
but at it's core, it's still using logic and reasoning to form its assumption.
Humans hold the incredible ability to make "irrational" and "illogical" decisions
just because we can. This is why we can never truly replace humans with machines,
no matter how complex we try and make them.